/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface Url
 */
export interface Url {
  /**
   *
   * @type {string}
   * @memberof Url
   */
  url: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<ValidationErrorLocInner>}
   * @memberof ValidationError
   */
  loc: Array<ValidationErrorLocInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}
/**
 *
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {}

/**
 * PDFApi - axios parameter creator
 * @export
 */
export const PDFApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Generate Resume Pdf
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateResumePdfPdfUserPost: async (
      user: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("generateResumePdfPdfUserPost", "user", user);
      const localVarPath = `/pdf/{user}`.replace(
        `{${"user"}}`,
        encodeURIComponent(String(user)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PDFApi - functional programming interface
 * @export
 */
export const PDFApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PDFApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Generate Resume Pdf
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateResumePdfPdfUserPost(
      user: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Url>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.generateResumePdfPdfUserPost(
          user,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PDFApi.generateResumePdfPdfUserPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PDFApi - factory interface
 * @export
 */
export const PDFApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PDFApiFp(configuration);
  return {
    /**
     *
     * @summary Generate Resume Pdf
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateResumePdfPdfUserPost(
      user: string,
      options?: any,
    ): AxiosPromise<Url> {
      return localVarFp
        .generateResumePdfPdfUserPost(user, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PDFApi - object-oriented interface
 * @export
 * @class PDFApi
 * @extends {BaseAPI}
 */
export class PDFApi extends BaseAPI {
  /**
   *
   * @summary Generate Resume Pdf
   * @param {string} user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PDFApi
   */
  public generateResumePdfPdfUserPost(
    user: string,
    options?: RawAxiosRequestConfig,
  ) {
    return PDFApiFp(this.configuration)
      .generateResumePdfPdfUserPost(user, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
